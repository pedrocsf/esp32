#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLEAdvertising.h>
#include <EEPROM.h>
#include "esp_bt_device.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"

// --- CONFIGS ---
#define EEPROM_SIZE 3
#define EEPROM_ADDR 0
#define EEPROM_BPM_ADDR 1
#define EEPROM_DIR_ADDR 2

#define DEVICE_NAME "HW706-0047980"

uint8_t getNextBPM()
{

  uint8_t bpm = EEPROM.read(EEPROM_BPM_ADDR);
  uint8_t dir = EEPROM.read(EEPROM_DIR_ADDR);

  // Inicialização de segurança
  if (bpm < 60 || bpm > 180)
    bpm = 60;
  if (dir > 1)
    dir = 0;

  // Atualiza BPM
  if (dir == 0) // Subindo
  {
    bpm++;
    if (bpm >= 180)
    {
      bpm = 180;
      dir = 1;
    }
  }
  else // Descendo
  {
    bpm--;
    if (bpm <= 60)
    {
      bpm = 60;
      dir = 0;
    }
  }

  // Grava valores atualizados
  EEPROM.write(EEPROM_BPM_ADDR, bpm);
  EEPROM.write(EEPROM_DIR_ADDR, dir);
  EEPROM.commit();

  return bpm;
}
// --- LISTA DE MACs UNICAST VÁLIDOS ---
const int macCount = 99;
uint8_t mac_list[99][6] = {
  {0xC2, 0x52, 0xF5, 0xC7, 0xD6, 0x00},
  {0xD2, 0x4F, 0x3A, 0x77, 0x22, 0x12},
  {0xE2, 0x91, 0xAB, 0x12, 0x34, 0x56},
  {0xC6, 0x34, 0xA7, 0x89, 0x10, 0x22},
  {0xD6, 0x89, 0xB1, 0x43, 0x21, 0x90},
  {0xE6, 0x11, 0x44, 0x66, 0x99, 0xAA},
  {0xC4, 0x12, 0x88, 0x55, 0x44, 0x66},
  {0xD4, 0xDE, 0xAD, 0xBE, 0xEF, 0x00},
  {0xE4, 0x00, 0x11, 0x22, 0x33, 0x44},
  {0xC8, 0xA1, 0xB2, 0xC3, 0xD4, 0xE4},
  {0xD8, 0x55, 0x66, 0x77, 0x88, 0x98},
  {0xE8, 0x99, 0x88, 0x77, 0x66, 0x54},
  {0xCA, 0xBC, 0xDE, 0xF0, 0x12, 0x34},
  {0xDA, 0x45, 0x67, 0x89, 0xAB, 0xCC},
  {0xEA, 0x11, 0x22, 0x33, 0x44, 0x54},
  {0xCC, 0x9F, 0x8E, 0x7D, 0x6C, 0x5A},
  {0xDC, 0x4A, 0x3B, 0x2C, 0x1D, 0x0E},
  {0xEC, 0xFE, 0xDC, 0xBA, 0x98, 0x76},
  {0xCE, 0x01, 0x23, 0x45, 0x67, 0x88},
  {0xDE, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE},
  {0xEE, 0x12, 0x34, 0x56, 0x78, 0x9A},
  {0xD2, 0x13, 0x24, 0x35, 0x46, 0x56},
  {0xE2, 0xF1, 0xE2, 0xD3, 0xC4, 0xB4},
  {0xC2, 0x11, 0x33, 0x55, 0x77, 0x98},
  {0xF2, 0x10, 0x20, 0x30, 0x40, 0x50},
  {0xF6, 0x01, 0x02, 0x03, 0x04, 0x04},
  {0xF6, 0xAB, 0xCD, 0xEF, 0x12, 0x34},
  {0xF8, 0x55, 0xAA, 0x55, 0xAA, 0x54},
  {0xFA, 0x99, 0x00, 0x99, 0x00, 0x98},
  {0xFC, 0xDE, 0xAD, 0xFA, 0xCE, 0x00},
  {0xFE, 0xCA, 0xFE, 0xBA, 0xBE, 0x00},
  {0xC2, 0x11, 0x22, 0x33, 0x44, 0x54},
  {0xD2, 0x66, 0x77, 0x88, 0x99, 0xAA},
  {0xE2, 0x10, 0x32, 0x54, 0x76, 0x98},
  {0xC6, 0x89, 0x67, 0x45, 0x23, 0x00},
  {0xD6, 0x0F, 0x1E, 0x2D, 0x3C, 0x4A},
  {0xE6, 0x12, 0x34, 0x56, 0x78, 0x90},
  {0xC4, 0x55, 0x44, 0x33, 0x22, 0x10},
  {0xD4, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4},
  {0xE4, 0x04, 0x03, 0x02, 0x01, 0x00},
  {0xC8, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E},
  {0xD8, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE},
  {0xE8, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E},
  {0xCA, 0xFE, 0xED, 0xBE, 0xEF, 0x00},
  {0xDA, 0x99, 0x88, 0x77, 0x66, 0x54},
  {0xEA, 0x22, 0x44, 0x66, 0x88, 0xAA},
  {0xCC, 0x77, 0x66, 0x55, 0x44, 0x32},
  {0xDC, 0xAB, 0xCD, 0xEF, 0x01, 0x22},
  {0xEC, 0xBA, 0xDC, 0xFE, 0x10, 0x32},
  {0xCE, 0x01, 0x10, 0x01, 0x10, 0x00},
  {0xDE, 0x42, 0x24, 0x42, 0x24, 0x42},
  {0xEE, 0x69, 0x96, 0x69, 0x96, 0x68},
  {0xC2, 0x0F, 0x0E, 0x0D, 0x0C, 0x0A},
  {0xD2, 0xFF, 0xEE, 0xDD, 0xCC, 0xBA},
  {0xE2, 0x1B, 0x2C, 0x3D, 0x4E, 0x5E},
  {0xF2, 0xBE, 0xEF, 0xBE, 0xEF, 0xBE},
  {0xC2, 0x88, 0x99, 0xAA, 0xBB, 0xCC},
  {0xD2, 0x33, 0x44, 0x55, 0x66, 0x78},
  {0xE2, 0x77, 0x88, 0x99, 0xAA, 0xBC},
  {0xF2, 0x11, 0x22, 0x33, 0x44, 0x56},
  {0xC2, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE},
  {0xD2, 0x12, 0x34, 0x56, 0x78, 0x9A},
  {0xE2, 0xAB, 0xCD, 0xEF, 0x01, 0x22},
  {0xF2, 0x99, 0x88, 0x77, 0x66, 0x54},
  {0xC6, 0x11, 0x22, 0x33, 0x44, 0x56},
  {0xD6, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE},
  {0xE6, 0x12, 0x34, 0x56, 0x78, 0x9A},
  {0xF6, 0x99, 0x88, 0x77, 0x66, 0x54},
  {0xCA, 0x11, 0x22, 0x33, 0x44, 0x56},
  {0xDA, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE},
  {0xEA, 0x12, 0x34, 0x56, 0x78, 0x9A},
  {0xFA, 0x99, 0x88, 0x77, 0x66, 0x54},
  {0xCE, 0x11, 0x22, 0x33, 0x44, 0x56},
  {0xDE, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE},
  {0xEE, 0x12, 0x34, 0x56, 0x78, 0x9A},
  {0xFE, 0x99, 0x88, 0x77, 0x66, 0x54},
  {0xC2, 0x01, 0x02, 0x03, 0x04, 0x06},
  {0xD2, 0x05, 0x06, 0x07, 0x08, 0x0A},
  {0xE2, 0x09, 0x0A, 0x0B, 0x0C, 0x0E},
  {0xF2, 0x0D, 0x0E, 0x0F, 0x10, 0x12},
  {0xC4, 0x11, 0x12, 0x13, 0x14, 0x16},
  {0xD4, 0x15, 0x16, 0x17, 0x18, 0x1A},
  {0xE4, 0x19, 0x1A, 0x1B, 0x1C, 0x1E},
  {0xF4, 0x1D, 0x1E, 0x1F, 0x20, 0x22},
  {0xC8, 0x21, 0x22, 0x23, 0x24, 0x26},
  {0xD8, 0x25, 0x26, 0x27, 0x28, 0x2A},
  {0xE8, 0x29, 0x2A, 0x2B, 0x2C, 0x2E},
  {0xF8, 0x2D, 0x2E, 0x2F, 0x30, 0x32},
  {0xCC, 0x31, 0x32, 0x33, 0x34, 0x36},
  {0xDC, 0x35, 0x36, 0x37, 0x38, 0x3A},
  {0xEC, 0x39, 0x3A, 0x3B, 0x3C, 0x3E},
  {0xFC, 0x3D, 0x3E, 0x3F, 0x40, 0x42},
  {0xC2, 0x41, 0x42, 0x43, 0x44, 0x46},
  {0xD2, 0x45, 0x46, 0x47, 0x48, 0x4A},
  {0xE2, 0x49, 0x4A, 0x4B, 0x4C, 0x4E},
  {0xF2, 0x4D, 0x4E, 0x4F, 0x50, 0x52},
  {0xC6, 0x51, 0x52, 0x53, 0x54, 0x56},
  {0xD6, 0x55, 0x56, 0x57, 0x58, 0x5A},
  {0xE6, 0x59, 0x5A, 0x5B, 0x5C, 0x5E}
};

// --- Função para pegar o próximo MAC index da EEPROM ---
int getNextMacIndex()
{

  int idx = EEPROM.read(EEPROM_ADDR);
  idx = (idx + 1) % macCount;
  EEPROM.write(EEPROM_ADDR, idx);
  EEPROM.commit();
  return idx;
}

// --- Callbacks BLE (opcional) ---
class MyServerCallbacks : public BLEServerCallbacks
{
  void onConnect(BLEServer *pServer)
  {
    Serial.println("Cliente conectado!");
  }
  void onDisconnect(BLEServer *pServer)
  {
    Serial.println("Cliente desconectado!");
  }
};

void setup()
{
  Serial.begin(115200);
  EEPROM.begin(EEPROM_SIZE);

  // --- Seleciona MAC ---
  int macIndex = getNextMacIndex();
  uint8_t *customMac = mac_list[macIndex];

  // Força MAC válido (unicast, local)
  // customMac[0] &= 0xFE; // bit 0 = 0
  // customMac[0] |= 0x02; // bit 1 = 1

  esp_base_mac_addr_set(customMac);

  // --- Inicia BLE ---
  BLEDevice::init(DEVICE_NAME);

  const uint8_t *realMac = esp_bt_dev_get_address();
  Serial.printf("MAC BLE usado: %02X:%02X:%02X:%02X:%02X:%02X\n",
                realMac[0], realMac[1], realMac[2],
                realMac[3], realMac[4], realMac[5]);

  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // --- Serviços (UUIDs) ---
  BLEService *heartRateService = pServer->createService(BLEUUID((uint16_t)0x180D));
  BLEService *userDataService = pServer->createService(BLEUUID((uint16_t)0x181C));
  BLEService *batteryService = pServer->createService(BLEUUID((uint16_t)0x180F));
  BLEService *deviceInfoService = pServer->createService(BLEUUID((uint16_t)0x180A));
  BLEService *customService = pServer->createService(BLEUUID((uint16_t)0xFD00));

  heartRateService->start();
  userDataService->start();
  batteryService->start();
  deviceInfoService->start();
  customService->start();

  // --- Advertising ---
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  BLEAdvertisementData advData;

  advData.setFlags(0x06);

  // UUIDs no advertising
  uint8_t uuidData[] = {
      0x0B, 0x03,
      0x0D, 0x18,
      0x1C, 0x18,
      0x0F, 0x18,
      0x0A, 0x18,
      0x00, 0xFD};
  advData.addData(std::string((const char *)uuidData, sizeof(uuidData)));

  // Manufacturer data (opcional)
  uint8_t bpm = getNextBPM();
  uint8_t batteryLevels[] = {0, 25, 50, 75, 100};
  int index = random(0, 5);
  uint8_t battery = batteryLevels[index];
  uint8_t mfrData[] = {0x07, 0xFF, 0x05, 0xFF, 0x01, battery, 0x06, bpm};
  advData.addData(std::string((const char *)mfrData, sizeof(mfrData)));

  // Nome do dispositivo
  const char *nome = DEVICE_NAME;
  size_t nomeLength = strlen(nome);
  uint8_t nomeData[2 + nomeLength];
  nomeData[0] = 1 + nomeLength;
  nomeData[1] = 0x09; // Complete Local Name
  memcpy(&nomeData[2], nome, nomeLength);
  advData.addData(std::string((const char *)nomeData, sizeof(nomeData)));

  // Inicia advertising
  pAdvertising->setAdvertisementData(advData);
  pAdvertising->start();
  Serial.print("BPM:");
  Serial.println(bpm);
  Serial.println("Advertising iniciado ###################################################################################################################");
}

void loop()
{
  // Nada a fazer aqui. Reinicie o ESP32 para trocar o MAC.

  while (true)
  {

    vTaskDelay(pdMS_TO_TICKS(500));
    esp_restart();
  }
}